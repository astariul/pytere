{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pytere","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the documentation of the <code>pytere</code> package.</p> <p><code>pytere</code> (Python template repository) is simply a template repository for python packages.</p> <p>This full-fledged template provides you with everything you need (documentation, unit-tests, code linting &amp; formatting, pre-commit hooks, etc...) so you can just focus on writing the code.</p> <p>If you want to use this template, follow the instructions at the Usage page.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#latest-version","title":"Latest version","text":"<p>You can install the latest version of the package directly from PyPi with :</p> <pre><code>pip install pytere\n</code></pre> <p>Hint</p> <p>If you want to install directly from Github, run : <pre><code>pip install git+https://github.com/astariul/pytere.git\n</code></pre></p>"},{"location":"#specific-version","title":"Specific version","text":"<p>You can install a specific version of the package (<code>0.1.0</code> in ths example) from PyPi with :</p> <pre><code>pip install pytere==0.1.0\n</code></pre> <p>Hint</p> <p>If you want to install directly from Github, run : <pre><code>pip install git+https://github.com/astariul/pytere.git@v0.1.0\n</code></pre></p>"},{"location":"#local","title":"Local","text":"<p>You can also clone the repository locally and install it manually :</p> <pre><code>git clone https://github.com/astariul/pytere.git\ncd pytere\npip install -e .\n</code></pre>"},{"location":"#extra-dependencies","title":"Extra dependencies","text":"<p>You can also install extras dependencies, for example :</p> <pre><code>pip install -e .[docs]\n</code></pre> <p>Will install necessary dependencies for building the docs.</p> <p>Hint</p> <p>If you installed the package directly from github, run : <pre><code>pip install \"pytere[docs] @ git+https://github.com/astariul/pytere.git\"\n</code></pre></p> <p>List of extra dependencies :</p> <ul> <li><code>test</code> : Dependencies for running unit-tests.</li> <li><code>hook</code> : Dependencies for running pre-commit hooks.</li> <li><code>lint</code> : Dependencies for running linters and formatters.</li> <li><code>docs</code> : Dependencies for building the documentation.</li> <li><code>dev</code> : <code>test</code> + <code>hook</code> + <code>lint</code> + <code>docs</code>.</li> <li><code>all</code> : All extra dependencies.</li> </ul>"},{"location":"#contribute","title":"Contribute","text":"<p>To contribute, install the package locally (see Installation), create your own branch, add your code (and tests, and documentation), and open a PR !</p>"},{"location":"#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>Pre-commit hooks are set to check the code added whenever you commit something.</p> <p>When you try to commit your code, hooks are automatically run, and if you code does not meet the quality required by linters, it will not be committed. You then have to fix your code and try to commit again !</p> <p>Important</p> <p>If you never ran the hooks before, install it with : <pre><code>pre-commit install\n</code></pre></p> <p>Info</p> <p>You can manually run the pre-commit hooks with : <pre><code>pre-commit run --all-files\n</code></pre></p>"},{"location":"#unit-tests","title":"Unit-tests","text":"<p>When you contribute, you need to make sure all the unit-tests pass. You should also add tests if necessary !</p> <p>You can run the tests with :</p> <pre><code>pytest\n</code></pre> <p>Info</p> <p>Tests are not included in the pre-commit hooks, because running the tests might be slow, and for the sake of developpers we want the pre-commit hooks to be fast !</p> <p>Info</p> <p>Pre-commit hooks will not run the tests, but it will automatically update the coverage badge !</p>"},{"location":"#documentation","title":"Documentation","text":"<p>When you contribute, make sure to keep the documentation up-to-date.</p> <p>You can visualize the documentation locally by running :</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"code_ref/","title":"pytere","text":"<p>Dummy package content for <code>pytere</code>.</p>"},{"location":"code_ref/#pytere.is_odd","title":"<code>is_odd(x)</code>","text":"<p>Function checking if a number is odd.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>Number to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the number is odd, False otherwise.</p> Source code in <code>pytere/__init__.py</code> <pre><code>def is_odd(x: float) -&gt; bool:\n    \"\"\"Function checking if a number is odd.\n\n    Args:\n        x (float): Number to check.\n\n    Returns:\n        bool: True if the number is odd, False otherwise.\n    \"\"\"\n    return x % 2 == 1\n</code></pre>"},{"location":"features/","title":"Features","text":"<p>This page introduces the different features included in this template repository, as well as where to find them and modify them if necessary.</p>"},{"location":"features/#documentation","title":"Documentation","text":"<p>This documentation is generated using Mkdocs, using Material for Mkdocs theme.</p> <p>Check out Material for Mkdocs documentation, their documentation is complete and easy to follow.</p> <p>Where to modify it ?</p> <p>If you want to modify the documentation, modify the appropriate markdown files in <code>docs/</code>.</p> <p>If you want to modify the configuration, take a look at <code>mkdocs.yml</code>.</p> <p>If you want to modify the theme (advanced), go to <code>docs/mkdocs/</code>.</p> <p>The documentation is versioned and published as a Github page with mike.</p> <p>Check mike's documentation for more details on how to use it. For a very short summary :</p> <ul> <li><code>mike deploy --push --update-aliases X.Y</code> to push the current documentation version as <code>X.Y</code> version.</li> <li><code>mike deploy --push --update-aliases X.Y name</code> to push the current documentation version as <code>X.Y</code> version, and add an alias <code>name</code>.</li> <li><code>mike retitle --push X.Y \"title\"</code> to set the title of <code>X.Y</code> as <code>title</code>. For example, <code>title</code> can be the full version <code>X.Y.Z</code>.</li> <li><code>mike set-default --push name</code> to set the alias <code>name</code> as default.</li> <li><code>mike delete --all --push</code> to remove everything (careful with that !).</li> <li><code>mike serve</code> to serve the documentation locally (for debugging).</li> </ul>"},{"location":"features/#code-formatting-linters","title":"Code formatting &amp; linters","text":"<p>To lint and check the format of the code, this template uses <code>ruff</code>.</p> <p>Where to modify it ?</p> <p>If you wish to not use one of these tools, you need to remove it from the pre-commit hooks and from the Github actions.</p>"},{"location":"features/#ruff","title":"<code>ruff</code>","text":"<p><code>ruff</code> is code linter and formatter, and replace the need for several tools, like <code>isort</code>, <code>flake8</code>, or <code>black</code>.</p> <p>You can run <code>ruff</code> manually by running :</p> <pre><code># Linter\nruff check . --fix\n\n# Formatter\nruff format .\n</code></pre> <p>Where to modify it ?</p> <p>You can modify the configuration of <code>ruff</code> in <code>pyproject.toml</code>. There are several sections, <code>ruff</code> uses all the sections starting with <code>[tool.ruff]</code>.</p>"},{"location":"features/#unit-testing","title":"Unit-testing","text":"<p>Unit-tests are implemented with <code>pytest</code>.</p> <p>You can run the unit-tests manually by running :</p> <pre><code>pytest\n</code></pre> <p>Where to modify it ?</p> <p>You can add/remove tests in the python files in <code>tests/</code>.</p> <p>If you wish to not run unit-tests, you need to remove it from the Github actions.</p> <p>The tests also check the test coverage, with the <code>pytest-cov</code> plugin.</p> <p>By default, the tests will fail if the test coverage is below 80%.</p> <p>Where to modify it ?</p> <p>You can change the <code>pytest</code> configuration in <code>pyproject.toml</code>. You can also change the coverage threshold in the same file.</p> <p>Info</p> <p>After running the unit-tests, you can update the coverage badge manually with <code>coverage-badge -o .github/badges/coverage.svg -f</code>.</p> <p>Note that you don't need to do it by yourself, a pre-commit hook will take care of that (see Pre-commit hooks).</p>"},{"location":"features/#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>Several pre-commit hooks are used in this template repository :</p> <ul> <li>Remove trailing whitespaces</li> <li>Ensure files have an empty line at the end</li> <li>Check the syntax of <code>yaml</code> files</li> <li>Ensure no large files are added</li> <li>Lint code with <code>ruff</code></li> <li>Format code with <code>ruff</code></li> <li>Ensure the coverage badge is up-to-date</li> </ul> <p>Where to modify it ?</p> <p>You can modify the configuration for pre-commit hooks in the file <code>.pre-commit-config.yaml</code>.</p>"},{"location":"features/#github-actions","title":"Github actions","text":""},{"location":"features/#continuous-integration","title":"Continuous Integration","text":"<p>Continuous Integration (CI) is here to make sure that an open PR is \"safe to merge\", that is : make sure the code is well formatted, the unit-tests are passing, etc...</p> <p>Two Github actions are used for CI : one for the code format, and one for the unit-tests. These actions are ran whenever a PR is opened.</p> <p>Where to modify it ?</p> <p>You can modify the Github action for code format in <code>.github/workflows/lint.yaml</code>.</p> <p>You can modify the Github action for unit-tests in <code>.github/workflows/pytest.yaml</code>.</p>"},{"location":"features/#continuous-deployment","title":"Continuous Deployment","text":"<p>Continuous Deployment (CD) is here to automatically deploying whatever needs to be deployed. It avoids manual labor.</p> <p>Three Github actions are used for CD :</p> <ul> <li>Deploying the latest documentation (ran whenever a commit is pushed in the main branch)</li> <li>Deploying the documentation of stable versions (ran whenever a release is published)</li> <li>Publishing the package to PyPi (ran whenever a release is published)</li> </ul> <p>Where to modify it ?</p> <p>You can modify the Github action for latest documentation deployment in <code>.github/workflows/mike_dev.yaml</code>.</p> <p>You can modify the Github action for stable documentation deployment in <code>.github/workflows/mike_stable.yaml</code>.</p> <p>You can modify the Github action for package publishing to PyPi in <code>.github/workflows/auto_pypi.yaml</code>.</p> <p>Make sure to give write permissions to the Github token</p> <p>The github actions <code>.github/workflows/mike_dev.yaml</code> and <code>.github/workflows/mike_stable.yaml</code> deploy the documentation in the branch <code>gh-pages</code>. In order to be able to push the changes, Github bot needs to have write permission to the repository.</p> <p>Go to the settings of your repository, then in the tab <code>Actions</code>, find the section <code>Workflow permissions</code> and make sure to select \"Read &amp; write permissions\".</p> <p>If you don't select \"Read &amp; write permissions\", the github actions publishing the documentation will fail with the following error :</p> <pre><code>error: failed to push branch gh-pages to origin: \"remote: Permission denied to github-actions[bot].\"\n</code></pre>"},{"location":"features/#others","title":"Others","text":"<p>There is one more Github action, which takes care of labeling and closing any stale issue or PR.</p> <p>Where to modify it ?</p> <p>You can modify the Github action for stale issue/PR and its configuration in <code>.github/workflows/stale.yaml</code>.</p>"},{"location":"features/#issues-pr-templates","title":"Issues &amp; PR Templates","text":"<p>This template repository uses a PR template. PR templates are useful to guide the format of new PR, making it easier to read and understand new PR.</p> <p>Where to modify it ?</p> <p>You can modify the PR template in the file <code>.github/pull_request_template.md</code>.</p> <p>The repository also defines several issue templates (for bugs, documentation issues, and features requests).</p> <p>These templates guide users in formatting their issue, and automatically label new issues.</p> <p>It's also useful to redirect users to the proper place to ask general questions (in the <code>Discussion</code> tab).</p> <p>Where to modify it ?</p> <p>You can modify each issue template in their appropriate file :</p> <ul> <li><code>.github/ISSUE_TEMPLATE/bug.yaml</code> for bugs</li> <li><code>.github/ISSUE_TEMPLATE/doc.yaml</code> for documentation issues</li> <li><code>.github/ISSUE_TEMPLATE/feature.yaml</code> for feature requests</li> </ul> <p>You can also modify redirections in the configuration file <code>.github/ISSUE_TEMPLATE/config.yml</code>.</p>"},{"location":"features/#dependabot","title":"Dependabot","text":"<p>Dependabot is enabled in this template repository. It keeps your dependencies up-to-date.</p> <p>Where to modify it ?</p> <p>You can enable/disable it in the <code>Settings</code> tab of your Github repository (<code>Security &amp; analysis</code> section).</p> <p>You can modify the configuration in the file <code>.github/dependabot.yml</code>.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#create-your-repository","title":"Create your repository","text":"<p>The very first step is to create your own repository from this template repository. To do this, just click the button \"Use this template\" :</p> <p> </p> <p>It will prompt you to create a new Github repository.</p>"},{"location":"usage/#add-your-content","title":"Add your content","text":"<p>Once your repository is created, you can just clone it and replace the dummy content with your content.</p> <p>To be sure you don't forget to replace anything, here is an exhaustive list of steps to follow :</p>"},{"location":"usage/#change-setuppy","title":"Change <code>setup.py</code>","text":"<p>In <code>setup.py</code>, replace the <code>name</code> of the package, the <code>version</code>, the <code>author</code> and the <code>author_email</code>, the package <code>description</code>, and the package <code>url</code>.</p>"},{"location":"usage/#replace-readmemd","title":"Replace <code>README.md</code>","text":"<p>You can keep the same README outline, but you must update the core content.</p> <p>Make sure to search for any occurence of the string <code>astariul/pytere</code> and replace it with your own <code>&lt;user&gt;/&lt;repo&gt;</code>.</p> <p>Make sure to search for any occurence of the string <code>astariul</code> and replace it with your own username.</p> <p>Make sure to search for any occurence of the string <code>pytere</code> and replace it with the name of your package.</p> <p>Important</p> <p>Don't forget to carefully read your README and edit each section with a content that fit your package !</p>"},{"location":"usage/#update-the-documentation","title":"Update the documentation","text":"<p>In the file <code>mkdocs.yml</code>, replace the <code>site_name</code>, <code>repo_url</code>, <code>repo_name</code>.</p> <p>Of course you also need to update the content of the documentation. You can do this by updating the <code>md</code> files in the <code>docs/</code> folder.</p> <p>For the code reference (in <code>docs/code_ref.md</code>), make sure to change the name from <code>pytere</code> to the name of your package.</p> <p>Info</p> <p>The documentation will be published in Github page after you create a Github release.</p>"},{"location":"usage/#change-the-package-name","title":"Change the package name","text":"<p>Make sure to replace the name of the folder <code>pytere/</code>, which contains the source code of the package, to the name of your package.</p> <p>Also don't forget to remove the dummy code in <code>pytere/__init__.py</code> !</p>"},{"location":"usage/#update-the-configuration-file","title":"Update the configuration file","text":"<p>In the configuration file <code>pyproject.toml</code>, you should replace the name <code>pytere</code> with the name of your package.</p>"},{"location":"usage/#replace-the-tests","title":"Replace the tests","text":"<p>Rename the test file <code>tests/test_pytere.py</code> and replace its content with actual tests !</p>"},{"location":"usage/#update-names-and-links-in-github-folder","title":"Update names and links in <code>.github/</code> folder","text":"<p>A few links to update in <code>.github/</code> folder :</p> <ul> <li>In <code>.github/ISSUE_TEMPLATE/bug.yaml</code>, replace <code>pytere</code> by the name of your package.</li> <li>In <code>.github/ISSUE_TEMPLATE/config.yml</code>, replace <code>astariul/pytere</code> by your <code>&lt;user&gt;/&lt;repo&gt;</code>.</li> <li>In <code>.github/workflows/mike_dev.yaml</code>, replace <code>pytere</code> by your package name.</li> <li>In <code>.github/workflows/mike_stable.yaml</code>, replace <code>pytere</code> by your package name.</li> </ul>"},{"location":"usage/#optionally","title":"Optionally","text":"<p>Optionally, if there is some features you don't want (like the Github action that automatically release your code to PyPi), you can remove it !</p> <p>Head over to the Features page to see which file to remove.</p>"},{"location":"usage/#enable-dependabot","title":"Enable Dependabot","text":"<p>From the Github website, on your repository page, you can enable Dependabot by going to the <code>Settings</code> tab of your repository, then in the <code>Security &amp; analysis</code> section you can enable <code>Dependabot alerts</code> and <code>Dependabot security updates</code>.</p>"},{"location":"usage/#give-write-permissions-to-workflows","title":"Give write permissions to workflows","text":"<p>Go to the settings of your repository, then in the tab <code>Actions</code>, find the section <code>Workflow permissions</code> and make sure to select \"Read &amp; write permissions\".</p> <p>This is needed because the <code>mike</code> Github actions needs to push to the <code>gh-pages</code> branch to publish your documentation.</p>"},{"location":"usage/#add-your-pypi-api-token","title":"Add your PyPi API token","text":"<p>The Github action that automatically publish your package to PyPi (see Features) requires your PyPi API token.</p> <p>You can store the API token in a Github secret. To do this, go to the <code>Settings</code> tab of your Github repository, then go to the <code>Secrets</code> section, and click the button <code>New repository secret</code>.</p> <p>Then set the name of the secret as <code>PYPI_API_TOKEN</code>, and put your API token in the value field.</p>"}]}